package com.comix.scrapers.bedetheque.rest.mapper.mapper;

import com.comix.scrapers.bedetheque.client.model.author.Author;
import com.comix.scrapers.bedetheque.client.model.author.AuthorDetails;
import com.comix.scrapers.bedetheque.client.model.author.AuthorsByLetter;
import com.comix.scrapers.bedetheque.rest.mapper.AuthorMapper;
import com.comix.scrapers.bedetheque.rest.v1.dto.AuthorDetailsDto;
import com.comix.scrapers.bedetheque.rest.v1.dto.AuthorUrlDto;
import com.comix.scrapers.bedetheque.rest.v1.dto.AuthorsByLetterDto;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import static org.assertj.core.api.Assertions.assertThat;

class AuthorMapperTest {

    // Get an instance of the mapper implementation generated by MapStruct
    private final AuthorMapper authorMapper = Mappers.getMapper(AuthorMapper.class);

    @Test
    @DisplayName("Should map AuthorsByLetter to AuthorsByLetterDto correctly")
    void shouldMapAuthorsByLetterToDto() {
        // GIVEN
        AuthorsByLetter source = new AuthorsByLetter("A", "http://a.com");

        // WHEN
        AuthorsByLetterDto destination = authorMapper.authorsByLetterToAuthorsByLetterDto(source);

        // THEN
        assertThat(destination).isNotNull();
        assertThat(destination.getLetter()).isEqualTo(source.getLetter());
        assertThat(destination.getUrl()).isEqualTo(source.getUrl());
    }

    @Test
    @DisplayName("Should return null when AuthorsByLetter source is null")
    void shouldReturnNullForNullAuthorsByLetter() {
        // WHEN
        AuthorsByLetterDto destination = authorMapper.authorsByLetterToAuthorsByLetterDto(null);

        // THEN
        assertThat(destination).isNull();
    }

    @Test
    @DisplayName("Should map Author to AuthorUrlDto correctly")
    void shouldMapAuthorToDto() {
        // GIVEN
        Author source = new Author("id", "Uderzo, Albert", "http://uderzo.com");

        // WHEN
        AuthorUrlDto destination = authorMapper.authorToAuthorDto(source);

        // THEN
        assertThat(destination).isNotNull();
        assertThat(destination.getName()).isEqualTo(source.getName());
        assertThat(destination.getUrl()).isEqualTo(source.getUrl());
    }

    @Test
    @DisplayName("Should return null when Author source is null")
    void shouldReturnNullForNullAuthor() {
        // WHEN
        AuthorUrlDto destination = authorMapper.authorToAuthorDto(null);

        // THEN
        assertThat(destination).isNull();
    }

    @Test
    @DisplayName("Should map AuthorDetails to AuthorDetailsDto correctly")
    void shouldMapAuthorDetailsToDto() {
        // GIVEN
        AuthorDetails source = new AuthorDetails(
                "id",
                "lastname",
                "firstname",
                "nickname",
                "nationality",
                "birthdate",
                "deceaseDate",
                "biography",
                "siteUrl",
                null,
                "photoUrl",
                "photoThbUrl",
                "authorUrl",
                null,
                null,
                null,
                null,
                null
        );

        // WHEN
        AuthorDetailsDto destination = authorMapper.authorDetailsToAuthorDetailsDto(source);

        // THEN
        assertThat(destination).isNotNull();
        assertThat(destination.getPhotoUrl()).isEqualTo(source.getPhotoUrl());
        assertThat(destination.getLastname()).isEqualTo(source.getLastname());
        assertThat(destination.getFirstname()).isEqualTo(source.getFirstname());
        assertThat(destination.getBirthdate()).isEqualTo(source.getBirthdate());
        assertThat(destination.getDeceaseDate()).isEqualTo(source.getDeceaseDate());
        assertThat(destination.getNationality()).isEqualTo(source.getNationality());
        assertThat(destination.getBiography()).isEqualTo(source.getBiography());
        assertThat(destination.getSiteUrl()).isEqualTo(source.getSiteUrl());
    }

    @Test
    @DisplayName("Should return null when AuthorDetails source is null")
    void shouldReturnNullForNullAuthorDetails() {
        // WHEN
        AuthorDetailsDto destination = authorMapper.authorDetailsToAuthorDetailsDto(null);

        // THEN
        assertThat(destination).isNull();
    }
}